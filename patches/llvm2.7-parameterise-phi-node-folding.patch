--- llvm-2.7.orig/lib/Transforms/Utils/SimplifyCFG.cpp	2010-02-16 11:11:14.000000000 +0000
+++ llvm-2.7/lib/Transforms/Utils/SimplifyCFG.cpp	2010-07-30 21:50:05.551699250 +0100
@@ -20,6 +20,7 @@
 #include "llvm/DerivedTypes.h"
 #include "llvm/GlobalVariable.h"
 #include "llvm/Support/CFG.h"
+#include "llvm/Support/CommandLine.h"
 #include "llvm/Support/Debug.h"
 #include "llvm/Support/raw_ostream.h"
 #include "llvm/Analysis/ConstantFolding.h"
@@ -37,6 +38,10 @@
 
 STATISTIC(NumSpeculations, "Number of speculative executed instructions");
 
+static cl::opt<unsigned>
+PHINodeFoldingThreshold("phi-node-folding-threshold", cl::Hidden, cl::init(2),
+   cl::desc("Control the amount of phi node folding to perform (default = 2)"));
+
 namespace {
 class SimplifyCFGOpt {
   const TargetData *const TD;
@@ -197,11 +202,20 @@
 /// which works well enough for us.
 ///
 /// If AggressiveInsts is non-null, and if V does not dominate BB, we check to
-/// see if V (which must be an instruction) is cheap to compute and is
-/// non-trapping.  If both are true, the instruction is inserted into the set
-/// and true is returned.
+/// see if V (which must be an instruction) and its recursive operands
+/// that do not dominate BB have a combined cost lower than CostRemaining and
+/// are non-trapping.  If both are true, the instruction is inserted into the
+/// set and true is returned.
+///
+/// The cost for most non-trapping instructions is defined as 1 except for
+/// Select whose cost is 2.
+///
+/// After this function returns, CostRemaining is decreased by the cost of
+/// V plus its non-dominating operands.  If that cost is greater than
+/// CostRemaining, false is returned and CostRemaining is undefined.
 static bool DominatesMergePoint(Value *V, BasicBlock *BB,
-                                std::set<Instruction*> *AggressiveInsts) {
+                                std::set<Instruction*> *AggressiveInsts,
+                                unsigned &CostRemaining) {
   Instruction *I = dyn_cast<Instruction>(V);
   if (!I) {
     // Non-instructions all dominate instructions, but not all constantexprs
@@ -223,12 +237,18 @@
   if (BranchInst *BI = dyn_cast<BranchInst>(PBB->getTerminator()))
     if (BI->isUnconditional() && BI->getSuccessor(0) == BB) {
       if (!AggressiveInsts) return false;
+
+       // If we have seen this instruction before, don't count it again.
+       if (AggressiveInsts->count(I)) return true;
+
       // Okay, it looks like the instruction IS in the "condition".  Check to
       // see if its a cheap instruction to unconditionally compute, and if it
       // only uses stuff defined outside of the condition.  If so, hoist it out.
       if (!I->isSafeToSpeculativelyExecute())
         return false;
 
+      unsigned Cost = 0;
+
       switch (I->getOpcode()) {
       default: return false;  // Cannot hoist this out safely.
       case Instruction::Load: {
@@ -240,6 +260,7 @@
           IP++;
         if (IP != BasicBlock::iterator(I))
           return false;
+        Cost = 1;
         break;
       }
       case Instruction::Add:
@@ -251,13 +272,26 @@
       case Instruction::LShr:
       case Instruction::AShr:
       case Instruction::ICmp:
+      case Instruction::Trunc:
+      case Instruction::ZExt:
+      case Instruction::SExt:
+        Cost = 1;
         break;   // These are all cheap and non-trapping instructions.
+
+      case Instruction::Select:
+        Cost = 2;
+        break;
       }
 
-      // Okay, we can only really hoist these out if their operands are not
-      // defined in the conditional region.
+      if (Cost > CostRemaining)
+        return false;
+
+      CostRemaining -= Cost;
+
+      // Okay, we can only really hoist these out if their operands do
+      // not take us over the cost threshold.
       for (User::op_iterator i = I->op_begin(), e = I->op_end(); i != e; ++i)
-        if (!DominatesMergePoint(*i, BB, 0))
+        if (!DominatesMergePoint(*i, BB, AggressiveInsts, CostRemaining))
           return false;
       // Okay, it's safe to do this!  Remember this instruction.
       AggressiveInsts->insert(I);
@@ -1184,6 +1218,7 @@
   // instructions.  While we are at it, keep track of the instructions
   // that need to be moved to the dominating block.
   std::set<Instruction*> AggressiveInsts;
+  unsigned MaxCost = PHINodeFoldingThreshold;
   
   BasicBlock::iterator AfterPHIIt = BB->begin();
   while (isa<PHINode>(AfterPHIIt)) {
@@ -1194,9 +1229,9 @@
       else
         PN->replaceAllUsesWith(UndefValue::get(PN->getType()));
     } else if (!DominatesMergePoint(PN->getIncomingValue(0), BB,
-                                    &AggressiveInsts) ||
+                                    &AggressiveInsts, MaxCost) ||
                !DominatesMergePoint(PN->getIncomingValue(1), BB,
-                                    &AggressiveInsts)) {
+                                    &AggressiveInsts, MaxCost)) {
       return false;
     }
   }
